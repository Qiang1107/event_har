# configs/your_action_config.yaml


# ===== 数据集设置 =====
dataset:
  train_dir: data/train
  val_dir:   data/val
  test_dir:  data/test

  # label_map: # 12
  #   Align_screwdriver:     0
  #   Approach:              1
  #   Idle:                  2
  #   No_human:              3
  #   Pick_bolt:             4
  #   Pick_cover:            5
  #   Pick_screwdriver:      6
  #   Place_bolt:            7
  #   Place_cover:           8
  #   Put_down_screwdriver:  9
  #   Screw:                10
  #   Transition:           11

  # label_map: # 10
  #   Align_screwdriver:     0
  #   Approach:              1
  #   Pick_bolt:             2
  #   Pick_cover:            3
  #   Pick_screwdriver:      4
  #   Place_bolt:            5
  #   Place_cover:           6
  #   Put_down_screwdriver:  7
  #   Screw:                 8
  #   Transition:            9

  # label_map: # 0428 6种
  #   Approach:                    0
  #   Pick_and_Place_Bolt:         1
  #   Pick_and_Place_Cover:        2
  #   Pick_and_Place_Screwdriver:  3
  #   Screw:                       4
  #   Transition:                  5

  label_map: # 0628 8种
    Approach:                    0
    Pick_and_Place_Bolt:         1
    Pick_and_Place_Cover:        2
    Pick_and_Place_Part1_Small:  3
    Pick_and_Place_Part2_Big:    4
    Pick_and_Place_Screwdriver:  5
    Screw:                       6
    Transition:                  7

  window_size:             9         # 定长帧数
  stride:                  3         # 滑动步长
  enable_transform:        true      # 是否启用数据变换
  
  window_size_us:          333333    # 单位微秒us, (333333/1000000)* 30fps = 10帧
  stride_us:               66666     # 单位微秒us, (66666/1000000)* 30fps = 2帧
  max_points:              8192      # 点云最大点数 4096 8192
  time_dimension:          true      # 是否使用时间维度
  enable_augment:          false     # 是否启用数据增强
  t_squash_factor:         3333      # 每t_squash_factor微秒内的时间戳表示成一个时间戳
  target_width:            346       # 目标图像宽度 346 256 128
  target_height:           260       # 目标图像高度 260 192 96
  min_events_per_window:   4000      # 一个时间窗口中最小事件数阈值

  window_size_event_count: 8192     # 窗口包含的事件数,可选: 8192, 16384, 32768
  step_size:               1024      # 滑动窗口步长（事件数）可选: 1024, 2048, 4096, 8192
  roi:                     true      # 是否使用感兴趣区域 false true
  denoise:                 false      # 是否执行降噪 false true
  denoise_method:          'voxel'   # 降噪方法: 'density', 'dbscan', 'voxel', 'histogram', 'random', 'temporal'
  denoise_radius:          0.001      # 降噪搜索半径
  voxel_size_txy:          [8000, 4, 4] # 体素大小 [t, x, y] 单位: 微秒 和 像素 t越大xy越大，保留更多的点
  min_neighbors:           5         # 最小邻居数量阈值
  denoise_threshold:       0.2       # 密度阈值参数


# ===== DataLoader 参数 =====
train:
  # ---------------------------------------
  batch_size:   128   # 32 for vit, 16 for cnn, 128 for pointnet2 in server # 32 or 16 for pointnet2msg in server
  # ---------------------------------------
  num_workers:  4      # 从0提升到4，并行数据加载
  shuffle:      true

val:
  # ---------------------------------------
  batch_size:   128
  # ---------------------------------------
  num_workers:  4    
  shuffle:      false

test:
  batch_size:   16
  num_workers:  0
  shuffle:      false


# ===== ViT模型配置 =====
vit_model:
  # ---------------------------------------
  img_size:    128 # [576, 768] # [192, 256] 384
  patch_size:  32 # [192, 256] 128
  in_channels:   3   # 4 for rgbe and rgbd, 3 for rgb, 1 for event
  # ---------------------------------------
  embed_dim:   768 # 768 384 512
  depth:      12 # 12 6
  num_heads:  12 # 12 6
  mlp_ratio:  4.0 # 4.0
  qkv_bias:   true
  qk_scale:   null
  drop_rate:  0.1
  attn_drop_rate: 0.0
  drop_path_rate: 0.3
  hybrid_backbone: null
  norm_layer:  null
  use_checkpoint: false
  frozen_stages: -1
  ratio:       1
  last_norm:  true
  patch_padding: pad
  freeze_attn: false
  freeze_ffn:  false

  neck_input_dim: 768  # 与embed_dim相同
  neck_hidden_dim: 256
  neck_mode: 'lstm'  # options: 'lstm', 'mean', 'none'

  head_input_dim: 256  # 与neck_hidden_dim相同
  head_num_classes: 8
  head_dropout_prob: 0.1

# ===== cnn模型配置 =====
cnn_model:
  # ---------------------------------------
  input_dim:  3          # 输入通道数   # 4 for rgbe and rgbd, 3 for rgb, 1 for event
  output_dim: 8          # 输出类别数
  input_height:  128         # 输入图像高度 192
  input_width: 128           # 输入图像宽度 256
  # ---------------------------------------

# 自定义ResNet配置
resnet_model:
  num_classes: 8
  input_channels: 3
  block_type: 'BasicBlock'  # 或 'Bottleneck'
  num_blocks: [2, 2, 2, 2]  # ResNet18
  temporal_strategy: 'frame_avg'  # 'lstm', 'transformer', 'frame_avg'
  dropout: 0.5

# 预训练ResNet配置
resnet_pretrained_model:
  num_classes: 8
  model_name: 'resnet18'  # 'resnet18', 'resnet34', 'resnet50', 'resnet101'
  pretrained: true
  temporal_strategy: 'lstm'  # 'lstm', 'gru', 'transformer', 'frame_avg'
  dropout: 0.5


# ===== pointnet2模型配置 =====
pointnet2_model:
  num_classes: 8
  normal_channel: True  # 事件数据没有法向量，相当于特征向量
  input_dim: 4  # t, x, y, p
  


# ===== 优化器 & 训练 =====
optimizer:
  type:         AdamW # 可选：SGD / Adam / AdamW
  lr:           0.00025 # 0.0001 or 2e-4 or 0.00025 or 0.01 or 0.0025
  weight_decay: 1e-2 # 0.001 or 5e-3

epochs:   20
device:   cuda:0
work_dir: results/checkpoints
log_dir: results/logs
test_log_dir: results/logs/test_logs
fig_dir: results/figs
test_fig_dir: results/figs/test_figs
# ---------------------------------------
model_type: pointnet2msg  # options: cnn / vit / pointnet2 / pointnet2msg / resnet / resnet_pretrained
# ---------------------------------------
